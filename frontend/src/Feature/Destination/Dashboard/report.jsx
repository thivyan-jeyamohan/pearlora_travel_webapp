import React, { useState, useEffect } from 'react';
import { jsPDF } from 'jspdf';
import logo from '../../../assets/logo.png'; // Adjust path as needed

const Report = () => {
  const [bookings, setBookings] = useState([]);
  const [filteredBookings, setFilteredBookings] = useState([]);
  const [destinations, setDestinations] = useState([]);
  const [destination, setDestination] = useState('');
  const [date, setDate] = useState('');
  const [sortOption, setSortOption] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
  const [totalPrice, setTotalPrice] = useState(0);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [bookingsRes, destinationsRes] = await Promise.all([
          fetch('http://localhost:5000/api/bookings/'),
          fetch('http://localhost:5000/api/admin-destinations'),
        ]);

        const bookingsData = await bookingsRes.json();
        const destinationsData = await destinationsRes.json();

        if (!bookingsRes.ok || !destinationsRes.ok) {
          throw new Error('Failed to fetch data');
        }

        setBookings(bookingsData.data);
        setFilteredBookings(bookingsData.data);
        setDestinations(destinationsData);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleFilter = () => {
    let filteredData = bookings;

    if (destination) {
      filteredData = filteredData.filter((booking) =>
        booking.destination?.toLowerCase().includes(destination.toLowerCase())
      );
    }

    if (date) {
      const selectedDate = new Date(date).toLocaleDateString();
      filteredData = filteredData.filter((booking) =>
        new Date(booking.date).toLocaleDateString() === selectedDate
      );
    }

    if (searchTerm) {
      filteredData = filteredData.filter((booking) =>
        booking.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (sortOption === 'date') {
      filteredData.sort((a, b) => new Date(a.date) - new Date(b.date));
    } else if (sortOption === 'price') {
      filteredData.sort((a, b) => a.price - b.price);
    }

    setFilteredBookings([...filteredData]);
  };

  const downloadPDF = () => {
    setIsGeneratingPDF(true);
    const doc = new jsPDF();
    const today = new Date().toLocaleDateString();

    let total = 0;

    fetch(logo)
      .then(res => res.blob())
      .then(blob => {
        const reader = new FileReader();
        reader.readAsDataURL(blob);
        reader.onloadend = function () {
          const base64data = reader.result;

          // Header Section
          doc.addImage(base64data, 'PNG', 10, 10, 50, 30); // Logo
          doc.setFontSize(22);
          doc.setFont('helvetica', 'bold');
          doc.text('Booking Report', 105, 20, { align: 'center' });

          // Date below logo
          doc.setFontSize(12);
          doc.setFont('helvetica', 'normal');
          doc.text(`Generated on: ${today}`, 105, 35, { align: 'center' });

          // Table Section
          doc.setFontSize(12);
          doc.setFillColor(59, 130, 246); // Header background color
          doc.setTextColor(255, 255, 255); // Header text color
          doc.rect(10, 50, 190, 10, 'F');
          doc.text('Name', 15, 57);
          doc.text('Destination', 55, 57);
          doc.text('Date', 115, 57);
          doc.text('People', 145, 57);
          doc.text('Price', 180, 57);

          // Table Rows
          let y = 65;
          filteredBookings.forEach((booking, index) => {
            doc.setTextColor(0, 0, 0); // Reset text color to black
            doc.setFillColor(index % 2 === 0 ? 240 : 255, 240, 240); // Alternating row colors
            doc.rect(10, y - 5, 190, 8, 'F'); // Row background color

            doc.text(booking.name, 15, y);
            doc.text(booking.destination, 55, y);
            doc.text(new Date(booking.date).toLocaleDateString(), 115, y);
            doc.text(booking.people.toString(), 145, y);
            doc.text(`$${booking.price}`, 180, y);

            total += booking.price; // Accumulate total price
            y += 10;
          });

          // Format the total price to two decimal places
          const formattedTotal = total.toFixed(2);

          // Total Price Section (Add formatted total price at the bottom)
          doc.setFontSize(14);
          doc.setFont('helvetica', 'bold');
          doc.text(`Total Price: $${formattedTotal}`, 105, y + 10, { align: 'center' });

          // Footer Section (Optional)
          doc.setFontSize(10);
          doc.setTextColor(150, 150, 150);
          doc.text(`Page 1 - Generated by Travel Agency`, 105, y + 20, { align: 'center' });

          doc.save('Booking_Report.pdf');
          setIsGeneratingPDF(false); // PDF generation complete
          setTotalPrice(formattedTotal); // Set total price with 2 decimals
        };
      });
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div className="text-red-600">{error}</div>;

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <div className="max-w-6xl mx-auto bg-white p-8 rounded-lg shadow-lg">
        <h1 className="text-3xl font-bold text-center mb-8">Booking Report</h1>

        <div className="mb-4">
          <input
            type="text"
            placeholder="Search by name..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full border border-gray-300 p-3 rounded-md mb-4"
          />
        </div>

        {/* Filters */}
        <div className="grid md:grid-cols-3 gap-6 mb-6">
          <div>
            <label className="block mb-2">Destination</label>
            <select
              value={destination}
              onChange={(e) => setDestination(e.target.value)}
              className="w-full border p-2 rounded"
            >
              <option value="">All</option>
              {destinations.map((d) => (
                <option key={d._id} value={d.name}>{d.name}</option>
              ))}
            </select>
          </div>

          <div>
            <label className="block mb-2">Date</label>
            <input
              type="date"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              className="w-full border p-2 rounded"
            />
          </div>

          <div>
            <label className="block mb-2">Sort By</label>
            <select
              value={sortOption}
              onChange={(e) => setSortOption(e.target.value)}
              className="w-full border p-2 rounded"
            >
              <option value="">None</option>
              <option value="date">Date</option>
              <option value="price">Price</option>
            </select>
          </div>
        </div>

        <div className="flex gap-4 mb-6">
          <button
            onClick={handleFilter}
            className="flex-1 bg-blue-500 text-white py-3 rounded hover:bg-blue-600"
          >
            Apply Filters
          </button>

          {filteredBookings.length > 0 && (
            <button
              onClick={downloadPDF}
              className="flex-1 bg-green-500 text-white py-3 rounded hover:bg-green-600"
            >
              Download PDF
            </button>
          )}
        </div>

        {/* Table */}
        {filteredBookings.length > 0 ? (
          <table className="min-w-full bg-white border rounded-md">
            <thead>
              <tr className="bg-blue-500 text-white">
                <th className="py-3 px-4 text-left">Name</th>
                <th className="py-3 px-4 text-left">Destination</th>
                <th className="py-3 px-4 text-left">Date</th>
                <th className="py-3 px-4 text-left">People</th>
                <th className="py-3 px-4 text-left">Price</th>
              </tr>
            </thead>
            <tbody>
              {filteredBookings.map((b) => (
                <tr key={b._id} className="border-t hover:bg-gray-50">
                  <td className="py-2 px-4">{b.name}</td>
                  <td className="py-2 px-4">{b.destination}</td>
                  <td className="py-2 px-4">{new Date(b.date).toLocaleDateString()}</td>
                  <td className="py-2 px-4">{b.people}</td>
                  <td className="py-2 px-4">${b.price}</td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <p className="text-gray-500 text-center">No bookings match the selected filters.</p>
        )}
      </div>
    </div>
  );
};

export default Report;
